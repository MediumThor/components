import React from 'react';
import { Trans, useTranslation } from 'react-i18next';
import SelectTokenDrawer from 'src/components/SwapWidget/SelectTokenDrawer';
import { usePair } from 'src/data/Reserves';
import { useTotalSupply, useTotalSupplyHook } from 'src/data/TotalSupply';
import { useLibrary } from 'src/hooks';
import { useAllTokens } from 'src/hooks/Tokens';
import { useUSDCPriceHook } from 'src/hooks/multiChainsHooks';
import useParsedQueryString from 'src/hooks/useParsedQueryString';
import { useUSDCPrice } from 'src/hooks/useUSDCPrice';
import { useActivePopups, useAddPopup, useRemovePopup } from 'src/state/papplication/hooks';
import { usePangoChefInfos } from 'src/state/ppangoChef/hooks';
import { calculateTotalStakedAmountInAvax, calculateTotalStakedAmountInAvaxFromPng, fetchChunkedAprs, fetchMinichefData, useDerivedStakeInfo, useGetAllFarmData, useMinichefPools, useMinichefStakingInfos } from 'src/state/pstake/hooks';
import { useGetAllFarmDataHook, useGetMinichefStakingInfosViaSubgraphHook, useMinichefStakingInfosHook } from 'src/state/pstake/multiChainsHooks';
import { DoubleSideStaking, DoubleSideStakingInfo, MinichefStakingInfo, PoolType, StakingInfo } from 'src/state/pstake/types';
import { LimitOrderInfo, useDerivedSwapInfo, useGelatoLimitOrderDetail, useGelatoLimitOrderList, useSwapActionHandlers } from 'src/state/pswap/hooks';
import { useAllTransactions, useAllTransactionsClearer } from 'src/state/ptransactions/hooks';
import { useGetUserLP, useTokenBalance } from 'src/state/pwallet/hooks';
import { useAccountBalanceHook, useTokenBalanceHook } from 'src/state/pwallet/multiChainsHooks';
import { existSarContract, getEtherscanLink, shortenAddress } from 'src/utils';
import { nearFn } from 'src/utils/near';
import { wrappedCurrency } from 'src/utils/wrappedCurrency';
import i18n, { availableLanguages } from './i18n';
import { PANGOLIN_PERSISTED_KEYS, pangolinReducers } from './state';
import { Position, useSarPositions, useSarStakeInfo } from './state/psarstake/hooks';
export declare function PangolinProvider({ chainId, library, children, account, theme, }: {
    chainId: number | undefined;
    library: any | undefined;
    account: string | undefined;
    children?: React.ReactNode;
    theme?: any;
}): JSX.Element;
export * from './constants';
export * from './connectors';
export * from './components';
export * from '@gelatonetwork/limit-orders-react';
export type { LimitOrderInfo, MinichefStakingInfo, DoubleSideStakingInfo, StakingInfo, DoubleSideStaking, Position };
export { SelectTokenDrawer };
export { useGelatoLimitOrderDetail, useGelatoLimitOrderList };
export { useSarStakeInfo, useSarPositions, useDerivedSwapInfo, useUSDCPrice, useAllTokens, useActivePopups, useRemovePopup, useAddPopup, usePair, useSwapActionHandlers, useLibrary, useAllTransactions, useAllTransactionsClearer, useAccountBalanceHook, useTranslation, useMinichefStakingInfosHook, useGetAllFarmData, useGetMinichefStakingInfosViaSubgraphHook, useGetUserLP, useMinichefStakingInfos, useDerivedStakeInfo, useMinichefPools, useTotalSupplyHook, useTotalSupply, useGetAllFarmDataHook, useTokenBalanceHook, useTokenBalance, usePangoChefInfos, useUSDCPriceHook, useParsedQueryString, };
export { pangolinReducers, PANGOLIN_PERSISTED_KEYS, wrappedCurrency, nearFn, i18n, availableLanguages, Trans, PoolType, fetchMinichefData, fetchChunkedAprs, calculateTotalStakedAmountInAvax, calculateTotalStakedAmountInAvaxFromPng, existSarContract, getEtherscanLink, shortenAddress, };
